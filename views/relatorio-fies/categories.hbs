
	<!-- Contenedor Principal  -->
	<div class="main-wrapper">
		<!-- Titulo -->
		<h1 class="main-title">Categorias - Insights</h1>

		<div class="container">		
			<ul class="list-category">
				<li onclick="showGraficoIdade()"><label class="button-default" for="idade">Idade</label></li>
				<li onclick="showGraficoGenero()"><label class="button-default" for="genero">Gênero</label></li>
				<li onclick="showGraficoEtnia()"><label class="button-default" for="etnia">Etnia</label></li>
				<li onclick="showGraficoRenda()"><label class="button-default" for="renda-familiar">Renda Familiar</label></li>				
                <li onclick="showGraficoDistribuicaoGenero()"><label class="button-insight" for="distribuicao-genero">Distribuição de Gênero</label></li>
				<li onclick="showGraficoEtniaNotaEnem()"><label class="button-insight" for="nota-enem-etnia">Candidatos Com Melhores Nota Enem</label></li>
				<li onclick="showGraficoMediaIdadeRendaPerCapta()"><label class="button-insight" for="media-idade-renda-per-capta">Média da idade dos Candidatos por Renda per Capita</label></li>
				<li onclick="showGraficoEnsinoMedioPorFaixaDeAnoEEtnia()"><label class="button-insight" for="ensino-medio-faixa-ano-etnia">Ensino Médio por Faixa de Ano e Etnia</label></li>
				<li onclick="showGraficoQtdPcdEtnia()"><label class="button-insight" for="pcd-etnia">Pessoas Com Deficiência por Etnia</label></li>
				<li onclick="showGraficoCandidatosPcdGenero()"><label class="button-insight" for="pcd-genero">Pessoas Com Deficiência por Gênero e Idade</label></li>
				<li onclick="showGraficoEtniaArea()"><label class="button-insight" for="pcd-area">Pessoas Com Deficiência por Área</label></li>
				<li onclick="showGraficoGeneroArea()"><label class="button-insight" for="genero-area">Candidatos por Gênero e Área</label></li>
				<li onclick="showGraficoSituacaoInscricaoPcd()"><label class="button-insight" for="situacao-inscricao-pcd">Situação das Inscrições dos Candidatos com PCD</label></li>
				<li onclick="showGraficoSituacaoInscricaoGenero()"><label class="button-insight" for="situacao-inscricao-genero">Situação das Inscrições dos Candidatos por Gênero</label></li>
				<li onclick="showGraficoSituacaoInscricaoEtnia()"><label class="button-insight" for="situacao-inscricao-etnia">Situação das Inscrições dos Candidatos por Etnia</label></li>

			</ul>            
		</div>
        <div id="chart-sul" style="width: 100%; height: 500px;">            
        </div>        
        <div id="legenda-sul" class="legenda"></div>
        <div id="chart-norte" style="width: 100%; height: 500px;">            
        </div>        
        <div id="legenda-norte" class="legenda"></div>
        <div id="chart-centro-oeste" style="width: 100%; height: 500px;">            
        </div>        
        <div id="legenda-centro-oeste" class="legenda"></div>
        <div id="chart-nordeste" style="width: 100%; height: 500px;">            
        </div>        
        <div id="legenda-nordeste" class="legenda"></div>
        <div id="chart-sudeste" style="width: 100%; height: 500px;">            
        </div>        
        <div id="legenda-sudeste" class="legenda"></div>
	</div>


<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

<script type="text/javascript">
    function showGraficoSituacaoInscricaoPcd() {
        getGraficoSituacaoInscricaoPcd("sul");
        getGraficoSituacaoInscricaoPcd("norte");
        getGraficoSituacaoInscricaoPcd("centro-oeste");
        getGraficoSituacaoInscricaoPcd("nordeste");
        getGraficoSituacaoInscricaoPcd("sudeste");
    }

    function showGraficoSituacaoInscricaoEtnia() {
        getGraficoSituacaoInscricaoEtnia("sul");
        getGraficoSituacaoInscricaoEtnia("norte");
        getGraficoSituacaoInscricaoEtnia("centro-oeste");
        getGraficoSituacaoInscricaoEtnia("nordeste");
        getGraficoSituacaoInscricaoEtnia("sudeste");
    }

    function showGraficoSituacaoInscricaoGenero() {
        getGraficoSituacaoInscricaoGenero("sul");
        getGraficoSituacaoInscricaoGenero("norte");
        getGraficoSituacaoInscricaoGenero("centro-oeste");
        getGraficoSituacaoInscricaoGenero("nordeste");
        getGraficoSituacaoInscricaoGenero("sudeste");
    }
    
    function showGraficoEnsinoMedioPorFaixaDeAnoEEtnia() {
        getGraficoEnsinoMedioPorFaixaDeAnoEEtnia("sul");
        getGraficoEnsinoMedioPorFaixaDeAnoEEtnia("norte");
        getGraficoEnsinoMedioPorFaixaDeAnoEEtnia("centro-oeste");
        getGraficoEnsinoMedioPorFaixaDeAnoEEtnia("nordeste");
        getGraficoEnsinoMedioPorFaixaDeAnoEEtnia("sudeste");
    }

    function showGraficoDistribuicaoGenero() {
        getGraficoDistribuicaoGenero("sul");
        getGraficoDistribuicaoGenero("norte");
        getGraficoDistribuicaoGenero("centro-oeste");
        getGraficoDistribuicaoGenero("nordeste");
        getGraficoDistribuicaoGenero("sudeste");
    }

    function showGraficoGeneroArea() {
        getGraficoGeneroArea("sul");
        getGraficoGeneroArea("norte");
        getGraficoGeneroArea("centro-oeste");
        getGraficoGeneroArea("nordeste");
        getGraficoGeneroArea("sudeste");
    }

    function showGraficoEtniaNotaEnem() {
        getGraficoEtniaNotaEnem("parda", "sul");
        getGraficoEtniaNotaEnem("branca", "norte");
        getGraficoEtniaNotaEnem("preta", "centro-oeste");
        getGraficoEtniaNotaEnem("amarela", "nordeste");
        getGraficoEtniaNotaEnem("indígena", "sudeste");
    }

    function showGraficoQtdPcdEtnia() {
        getGraficoCandidatosPcdEtnia("parda", "sul");
        getGraficoCandidatosPcdEtnia("branca", "norte");
        getGraficoCandidatosPcdEtnia("preta", "centro-oeste");
        getGraficoCandidatosPcdEtnia("amarela", "nordeste");
        getGraficoCandidatosPcdEtnia("indígena", "sudeste");
    }
    
    function showGraficoGenero() {
        getGraficoGenero("sul");
        getGraficoGenero("norte");
        getGraficoGenero("centro-oeste");
        getGraficoGenero("nordeste");
        getGraficoGenero("sudeste");
    }

    function showGraficoEtnia() {
        getGraficoEtnia("sul");
        getGraficoEtnia("norte");
        getGraficoEtnia("centro-oeste");
        getGraficoEtnia("nordeste");
        getGraficoEtnia("sudeste");
    }

    function showGraficoIdade() {        
        getGraficoIdade("sul");
        getGraficoIdade("norte");
        getGraficoIdade("centro-oeste");
        getGraficoIdade("nordeste");
        getGraficoIdade("sudeste");        
    }

    function showGraficoRenda() {        
        getGraficoRenda("sul");
        getGraficoRenda("norte");
        getGraficoRenda("centro-oeste");
        getGraficoRenda("nordeste");
        getGraficoRenda("sudeste");           
    }

    function showGraficoCandidatosPcdGenero() {        
        getGraficoCandidatosPcdGenero("sul");
        getGraficoCandidatosPcdGenero("norte");
        getGraficoCandidatosPcdGenero("centro-oeste");
        getGraficoCandidatosPcdGenero("nordeste");
        getGraficoCandidatosPcdGenero("sudeste");           
    }

    function showGraficoMediaIdadeRendaPerCapta() {
        getGraficoMediaIdadeRendaPerCapita("sul");
        getGraficoMediaIdadeRendaPerCapita("norte");
        getGraficoMediaIdadeRendaPerCapita("centro-oeste");
        getGraficoMediaIdadeRendaPerCapita("nordeste");
        getGraficoMediaIdadeRendaPerCapita("sudeste");  
    }

    function showGraficoEtniaArea() {
        getGraficoEtniaArea("sul");
        getGraficoEtniaArea("norte");
        getGraficoEtniaArea("centro-oeste");
        getGraficoEtniaArea("nordeste");
        getGraficoEtniaArea("sudeste");  
    }

    function getGraficoIdade(regiao) {
        $.ajax({
            url: 'http://localhost:3004/relatorio-fies/get-age/' + regiao,
            type: 'get',
            dataType: 'json',
        }).done(function (data) {
            const contagemPorFaixaEtaria = {};

            // Definir as faixas etárias desejadas
            const faixasEtarias = [
                { min: 19, max: 24, label: '19-24' },
                { min: 25, max: 29, label: '25-29' },
                { min: 30, max: 34, label: '30-34' },
                { min: 35, max: 39, label: '35-39' },
                { min: 40, max: 44, label: '40-44' },
                { min: 45, max: 49, label: '45-49' },
                { min: 50, max: 69, label: '50-69' }
                // Adicione mais faixas etárias conforme necessário
            ];

            // Inicializar contagem para cada faixa etária
            faixasEtarias.forEach(faixa => {
                contagemPorFaixaEtaria[faixa.label] = 0;
            });

            // Loop através do conjunto de dados para contar cada faixa etária
            data.forEach(item => {
                const idade = item.idade;

                // Encontrar a faixa etária correspondente
                const faixa = faixasEtarias.find(faixa => idade >= faixa.min && idade <= faixa.max);

                // Incrementar a contagem para a faixa etária encontrada
                if (faixa) {
                    contagemPorFaixaEtaria[faixa.label]++;
                }
            });

            // Calcular a quantidade total de registros
            const totalRegistros = data.length;

            // Converter o objeto em um array para usar no gráfico de barras
            const dadosFormatados = Object.keys(contagemPorFaixaEtaria).map(faixa => {
                const percentual = ((contagemPorFaixaEtaria[faixa] * 100) / totalRegistros).toFixed(2) + '%';
                return {
                    faixa: faixa,
                    quantidade: contagemPorFaixaEtaria[faixa],
                    percentual: percentual
                };
            });

            // Criar o gráfico de barras com base nas faixas etárias
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(function () {
                const chartData = new google.visualization.DataTable();
                chartData.addColumn('string', 'Faixa Etária');
                chartData.addColumn('number', 'Número de Registros');
                chartData.addColumn({ type: 'string', role: 'annotation' }); // Adicionar coluna para os percentuais
                chartData.addRows(dadosFormatados.map(item => [item.faixa, item.quantidade, `${item.quantidade} (${item.percentual})`]));

                const options = {
                    title: 'Gráfico por Faixa Etária de Idade da Região ' + regiao.charAt(0).toUpperCase() + regiao.slice(1),
                    legend: { position: 'none' },
                    bars: 'vertical', // Tipo de gráfico de barras
                    bar: { groupWidth: '50%' }, // Espaçamento entre barras
                };

                const chart = new google.visualization.ColumnChart(document.getElementById(`chart-${regiao}`));
                chart.draw(chartData, options);

                // Atualizar a legenda
                const legenda = document.getElementById(`legenda-${regiao}`);
                legenda.innerHTML = '<strong>Legenda:</strong> ' + dadosFormatados.map(item => `<strong>${item.faixa}</strong>: <span class="legenda-quantidade">${item.quantidade} (${item.percentual})</span>`).join(', ');
            });
        }).fail(function (jqXHR, textStatus, msg) {
            alert('Erro na requisição: ' + msg);
        });
    }

    function getGraficoGenero(regiao) {
        $.ajax({
            url: 'http://localhost:3004/relatorio-fies/get-genero/' + regiao,
            type: 'get',
            dataType: 'json',
        }).done(function (data) {
            const contagemPorGenero = {
                'M': 0,
                'F': 0
            };

            // Loop através do conjunto de dados para contar cada gênero
            data.forEach(item => {
                const genero = item.sexo;

                // Incrementar a contagem para o gênero encontrado
                if (contagemPorGenero.hasOwnProperty(genero)) {
                    contagemPorGenero[genero]++;
                }
            });

            // Calcular a quantidade total de registros
            const totalRegistros = data.length;

            // Mapear os valores dos gêneros para rótulos mais descritivos
            const rotulosGenero = {
                'M': 'Masculino',
                'F': 'Feminino'
            };

            // Converter o objeto em um array para usar no gráfico de barras
            const dadosFormatados = Object.keys(contagemPorGenero).map(genero => {
                const percentual = ((contagemPorGenero[genero] * 100) / totalRegistros).toFixed(2) + '%';
                return {
                    genero: rotulosGenero[genero],
                    quantidade: contagemPorGenero[genero],
                    percentual: percentual
                };
            });

            // Criar o gráfico de barras com base nos gêneros
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(function () {
                const chartData = new google.visualization.DataTable();
                chartData.addColumn('string', 'Gênero');
                chartData.addColumn('number', 'Número de Registros');
                chartData.addColumn({ type: 'string', role: 'annotation' }); // Adicionar coluna para os percentuais
                chartData.addRows(dadosFormatados.map(item => [item.genero, item.quantidade, `${item.quantidade} (${item.percentual})`]));

                const options = {
                    title: 'Gráfico por Gênero na Região ' + regiao.charAt(0).toUpperCase() + regiao.slice(1),
                    legend: { position: 'none' },
                    bars: 'vertical', // Tipo de gráfico de barras
                    bar: { groupWidth: '50%' }, // Espaçamento entre barras
                };

                const chart = new google.visualization.ColumnChart(document.getElementById(`chart-${regiao}`));
                chart.draw(chartData, options);
                // Atualizar a legenda
                const legenda = document.getElementById(`legenda-${regiao}`);
                legenda.innerHTML = '<strong>Legenda:</strong> ' + dadosFormatados.map(item => `<strong>${item.genero}</strong>: <span class="legenda-quantidade">${item.quantidade} (${item.percentual})</span>`).join(', ');
            });
        }).fail(function (jqXHR, textStatus, msg) {
            alert('Erro na requisição: ' + msg);
        });
    }

    function getGraficoEtnia(regiao) {
        $.ajax({
            url: 'http://localhost:3004/relatorio-fies/get-etnia/' + regiao,
            type: 'get',
            dataType: 'json',
        }).done(function (data) {
            const contagemPorEtnia = {};

            // Loop através do conjunto de dados para contar cada etnia
            data.forEach(item => {
                const etnia = item.etnia_cor;

                // Incrementar a contagem para a etnia encontrada
                if (!contagemPorEtnia.hasOwnProperty(etnia)) {
                    contagemPorEtnia[etnia] = 0;
                }

                contagemPorEtnia[etnia]++;
            });

            // Calcular a quantidade total de registros
            const totalRegistros = data.length;

            // Mapear os valores das etnias para rótulos mais descritivos
            // (Você pode ajustar conforme necessário)
            const rotulosEtnia = {
                'BRANCA': 'Branca',
                'PRETA': 'Preta',
                'PARDA': 'Parda',
                'AMARELA': 'Amarela',
                'INDÍGENA': 'Indígena'
            };

            // Converter o objeto em um array para usar no gráfico de barras
            const dadosFormatados = Object.keys(rotulosEtnia).map(etnia => {
                const percentual = ((contagemPorEtnia[etnia] || 0) * 100 / totalRegistros).toFixed(2) + '%';
                return {
                    etnia: rotulosEtnia[etnia],
                    quantidade: contagemPorEtnia[etnia] || 0,
                    percentual: percentual
                };
            });

            // Criar o gráfico de barras com base nas etnias
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(function () {
                const chartData = new google.visualization.DataTable();
                chartData.addColumn('string', 'Etnia');
                chartData.addColumn('number', 'Número de Registros');
                chartData.addColumn({ type: 'string', role: 'annotation' }); // Adicionar coluna para os percentuais
                chartData.addRows(dadosFormatados.map(item => [item.etnia, item.quantidade, `${item.quantidade} (${item.percentual})`]));

                const options = {
                    title: 'Gráfico por Etnia na Região ' + regiao.charAt(0).toUpperCase() + regiao.slice(1),
                    legend: { position: 'none' },
                    bars: 'vertical', // Tipo de gráfico de barras
                    bar: { groupWidth: '50%' }, // Espaçamento entre barras
                };

                const chart = new google.visualization.ColumnChart(document.getElementById(`chart-${regiao}`));
                chart.draw(chartData, options);

                // Atualizar a legenda
                const legenda = document.getElementById(`legenda-${regiao}`);
                legenda.innerHTML = '<strong>Legenda:</strong> ' + dadosFormatados.map(item => `<strong>${item.etnia}</strong>: <span class="legenda-quantidade">${item.quantidade} (${item.percentual})</span>`).join(', ');
            });
        }).fail(function (jqXHR, textStatus, msg) {
            alert('Erro na requisição: ' + msg);
        });
    }

    function getGraficoRenda(regiao) {
        $.ajax({
            url: 'http://localhost:3004/relatorio-fies/get-renda-familiar/' + regiao,
            type: 'get',
            dataType: 'json',
        }).done(function (data) {
            const contagemPorFaixaRenda = {};

            // Definir as faixas de renda desejadas
            const faixasRenda = [
                { min: 0, max: 1500, label: '0-1500' },
                { min: 1501, max: 3000, label: '1501-3000' },
                { min: 3001, max: 4500, label: '3001-4500' },
                { min: 4501, max: 6000, label: '4501-6000' },
                { min: 6001, max: 9000, label: '6001-9000' },
                { min: 9001, max: 12000, label: '9001-12000' },
                { min: 12001, max: 9999999, label: 'Acima de 12000' },
            ];

            // Inicializar contagem para cada faixa de renda
            faixasRenda.forEach(faixa => {
                contagemPorFaixaRenda[faixa.label] = 0;
            });

            // Loop através do conjunto de dados para contar cada faixa de renda
            data.forEach(item => {
                const renda = item.renda_familiar_mensal_bruta;

                // Encontrar a faixa de renda correspondente
                const faixa = faixasRenda.find(faixa => {
                    if (renda !== null && renda >= faixa.min && renda <= faixa.max) {
                        return true;
                    } else if (renda === null && faixa.min === 0 && faixa.max === 500) {
                        // Caso especial para lidar com valores nulos na primeira faixa
                        return true;
                    }
                    return false;
                });

                // Incrementar a contagem para a faixa de renda encontrada
                if (faixa) {
                    contagemPorFaixaRenda[faixa.label]++;
                }
            });

            // Calcular a quantidade total de registros
            const totalRegistros = data.length;

            // Converter o objeto em um array para usar no gráfico de barras
            const dadosFormatados = Object.keys(contagemPorFaixaRenda).map(faixa => {
                const percentual = ((contagemPorFaixaRenda[faixa] || 0) * 100 / totalRegistros).toFixed(2) + '%';
                return {
                    faixa: faixa,
                    quantidade: contagemPorFaixaRenda[faixa] || 0,
                    percentual: percentual
                };
            });

            // Criar o gráfico de barras com base nas faixas de renda
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(function () {
                const chartData = new google.visualization.DataTable();
                chartData.addColumn('string', 'Faixa de Renda');
                chartData.addColumn('number', 'Número de Registros');
                chartData.addColumn({ type: 'string', role: 'annotation' }); // Adicionar coluna para os percentuais
                chartData.addRows(dadosFormatados.map(item => [item.faixa, item.quantidade, `${item.quantidade} (${item.percentual})`]));

                const options = {
                    title: 'Gráfico por Faixa de Renda Bruta da Região ' + regiao.charAt(0).toUpperCase() + regiao.slice(1),
                    legend: { position: 'none' },
                    bars: 'vertical', // Tipo de gráfico de barras
                    bar: { groupWidth: '50%' }, // Espaçamento entre barras
                };

                const chart = new google.visualization.ColumnChart(document.getElementById(`chart-${regiao}`));
                chart.draw(chartData, options);

                // Atualizar a legenda
                const legenda = document.getElementById(`legenda-${regiao}`);
                legenda.innerHTML = '<strong>Legenda:</strong> ' + dadosFormatados.map(item => `<strong>${item.faixa}</strong>: <span class="legenda-quantidade">${item.quantidade} (${item.percentual})</span>`).join(', ');
            });
        }).fail(function (jqXHR, textStatus, msg) {
            alert('Erro na requisição: ' + msg);
        });
    }

    function getGraficoMediaIdadeRendaPerCapita(regiao) {
        $.ajax({
            url: 'http://localhost:3004/relatorio-fies/get-idade-renda-percapta/' + regiao,
            type: 'get',
            dataType: 'json',
        }).done(function (data) {
            const contagemPorFaixaRenda = {};
            let totalEstudantes = 0;

            // Definir as faixas de renda per capita desejadas
            const faixasRendaPerCapita = [
                { min: 0, max: 1500, label: '0-1500' },
                { min: 1501, max: 2500, label: '1501-2500' },
                { min: 2501, max: 3000, label: '2501-3000' },
                { min: 3001, max: 3500, label: '3001-3500' },
                { min: 3501, max: 4000, label: '3501-4000' },
                { min: 4001, max: 4500, label: '4001-4500' },
                { min: 4501, max: 5000, label: '4501-5000' },
            ];

            // Inicializar contagem para cada faixa de renda per capita
            faixasRendaPerCapita.forEach(faixa => {
                contagemPorFaixaRenda[faixa.label] = { totalEstudantes: 0 };
            });

            // Loop através do conjunto de dados para contar os estudantes por faixa de renda per capita
            data.forEach(item => {
                const rendaPerCapita = item.renda_per_capta;

                // Encontrar a faixa de renda per capita correspondente
                const faixa = faixasRendaPerCapita.find(faixa => {
                    if (rendaPerCapita !== null && rendaPerCapita >= faixa.min && rendaPerCapita <= faixa.max) {
                        return true;
                    } else if (rendaPerCapita === null && faixa.min === 0 && faixa.max === 1500) {
                        // Caso especial para lidar com valores nulos na primeira faixa
                        return true;
                    }
                    return false;
                });

                // Incrementar a contagem de estudantes para a faixa de renda per capita encontrada
                if (faixa) {
                    contagemPorFaixaRenda[faixa.label].totalEstudantes++;
                    totalEstudantes++; // Incrementar o total global de estudantes
                }
            });

            // Criar o gráfico de barras com base nas faixas de renda per capita
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(function () {
                const chartData = new google.visualization.DataTable();
                chartData.addColumn('string', 'Faixa de Renda Per Capita');
                chartData.addColumn('number', 'Quantidade de Estudantes');
                chartData.addColumn({ type: 'string', role: 'annotation' }); // Rótulo para o percentual

                // Adicionar dados ao DataTable
                Object.keys(contagemPorFaixaRenda).forEach(faixa => {
                    const percentual = (contagemPorFaixaRenda[faixa].totalEstudantes / totalEstudantes) * 100;
                    chartData.addRows([[faixa, contagemPorFaixaRenda[faixa].totalEstudantes, percentual.toFixed(2) + '%']]);
                });

                const options = {
                    title: 'Gráfico de Estudantes por Faixa de Renda Per Capita da Região ' + regiao.charAt(0).toUpperCase() + regiao.slice(1),
                    bars: 'vertical', // Tipo de gráfico de barras
                    bar: { groupWidth: '50%' }, // Espaçamento entre barras
                };

                const chart = new google.visualization.ColumnChart(document.getElementById(`chart-${regiao}`));
                chart.draw(chartData, options);

                // Atualizar a legenda
                const legenda = document.getElementById(`legenda-${regiao}`);
                legenda.innerHTML = '<strong>Legenda:</strong> ' + Object.keys(contagemPorFaixaRenda).map(faixa => `<strong>${faixa}</strong>: ${contagemPorFaixaRenda[faixa].totalEstudantes} (${((contagemPorFaixaRenda[faixa].totalEstudantes / totalEstudantes) * 100).toFixed(2)}%)`).join(', ');
            });
        }).fail(function (jqXHR, textStatus, msg) {
            alert('Erro na requisição: ' + msg);
        });
    }    
   
    function getGraficoEtniaNotaEnem(etnia, regiao) {        
        $.ajax({
            url: 'http://localhost:3004/relatorio-fies/get-melhores-notas-etnia/' + etnia,
            type: 'get',
            dataType: 'json',
        }).done(function (data) {
            // Converter o formato do data para algo mais fácil de usar
            const dadosFormatados = data.map(item => ({
                regiao: item.regiao_grupo_preferencia,
                quantidade: item._count ? item._count.regiao_grupo_preferencia : 0
            }));

            // Calcular a quantidade total de candidatos
            const totalCandidatos = dadosFormatados.reduce((total, item) => total + item.quantidade, 0);

            // Criar o gráfico de barras com base nas regiões
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(function () {
                const chartData = new google.visualization.DataTable();
                chartData.addColumn('string', 'Região');
                chartData.addColumn('number', 'Quantidade');
                chartData.addColumn({ type: 'string', role: 'annotation' }); // Adicionar coluna para os percentuais
                chartData.addRows(dadosFormatados.map(item => {
                    const percentual = (item.quantidade / totalCandidatos * 100).toFixed(2) + '%';
                    return [item.regiao, item.quantidade, percentual];
                }));

                // Configurar as opções do gráfico
                const options = {
                    title: `Quantidade de Candidatos com Etnia ${etnia.charAt(0).toUpperCase()}${etnia.slice(1)} e com as Melhores Notas no ENEM por Região`,
                    bars: 'vertical', // Tipo de gráfico de barras
                    bar: { groupWidth: '50%' }, // Espaçamento entre barras
                };

                // Criar o gráfico de barras
                const chart = new google.visualization.ColumnChart(document.getElementById(`chart-${regiao}`));
                chart.draw(chartData, options);

                // Atualizar a legenda
                const legenda = document.getElementById(`legenda-${regiao}`);
                legenda.innerHTML = '<strong>Legenda:</strong> ' + dadosFormatados.map(item => {
                    const percentual = (item.quantidade / totalCandidatos * 100).toFixed(2) + '%';
                    return `<strong>${item.regiao}</strong>: <span class="legenda-quantidade">${item.quantidade} (${percentual})</span>`;
                }).join(', ');
            });
        });        
    }

    function getGraficoDistribuicaoGenero(regiao) {
        $.ajax({
            url: 'http://localhost:3004/relatorio-fies/get-distribuicao-genero/' + regiao,
            type: 'get',
            dataType: 'json',
        }).done(function (data) {
            const contagemPorFaixaEtariaGenero = {};

            // Definir as faixas etárias desejadas
            let faixasEtarias = [
                { min: 19, max: 24, label: '19-24' },
                { min: 25, max: 29, label: '25-29' },
                { min: 30, max: 34, label: '30-34' },
                { min: 35, max: 39, label: '35-39' },
                { min: 40, max: 44, label: '40-44' },
                { min: 45, max: 49, label: '45-49' },
                { min: 50, max: 69, label: '50-69' }
                // Adicione mais faixas etárias conforme necessário
            ];

            faixasEtarias = faixasEtarias.map(item => {
                const quantEstudantes = data.filter(estudante => (estudante.idade >= item.min && estudante.idade <= item.max)).length;

                return {
                    min: item.min,
                    max: item.max,
                    label: item.label,
                    quantidade: quantEstudantes
                };
            });

            // Definir os gêneros
            const generos = ['M', 'F']; // Assume 'M' para Masculino e 'F' para Feminino

            // Inicializar contagem para cada faixa etária e gênero
            faixasEtarias.forEach(faixa => {
                contagemPorFaixaEtariaGenero[faixa.label] = {};
                generos.forEach(genero => {
                    contagemPorFaixaEtariaGenero[faixa.label][genero] = 0;
                });
            });

            // Loop através do conjunto de dados para contar cada faixa etária e gênero
            data.forEach(item => {
                const idade = item.idade;
                const genero = item.sexo; // Alterado de 'genero' para 'sexo' conforme o exemplo de retorno da API

                // Encontrar a faixa etária correspondente
                const faixa = faixasEtarias.find(faixa => idade >= faixa.min && idade <= faixa.max);

                // Incrementar a contagem para a faixa etária e gênero encontrados
                if (faixa && genero) {
                    contagemPorFaixaEtariaGenero[faixa.label][genero]++;
                }
            });

            // Converter o objeto em um array para usar no gráfico de barras
            const dadosFormatados = [];
            faixasEtarias.forEach(faixa => {
                generos.forEach(genero => {
                    dadosFormatados.push({
                        faixa: faixa.label,
                        genero: genero,
                        quantidade: contagemPorFaixaEtariaGenero[faixa.label][genero]
                    });
                });
            });

            // Calcular a quantidade total de estudantes
            const totalEstudantes = data.length;

            // Criar o gráfico de barras com base nas faixas etárias e gêneros
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(function () {
                const chartData = new google.visualization.DataTable();
                chartData.addColumn('string', 'Faixa Etária');

                // Adicionar colunas para cada gênero
                generos.forEach(genero => {
                    chartData.addColumn('number', genero);
                    chartData.addColumn({ type: 'string', role: 'annotation' });
                });

                // Adicionar dados ao DataTable
                faixasEtarias.forEach(faixa => {
                    const dadosFaixa = dadosFormatados.filter(item => item.faixa === faixa.label);
                    const row = [faixa.label];
                    generos.forEach(genero => {
                        const dadoGenero = dadosFaixa.find(item => item.genero === genero);
                        const percentual = ((dadoGenero ? dadoGenero.quantidade : 0) * 100 / totalEstudantes).toFixed(2) + '%';
                        row.push(dadoGenero ? dadoGenero.quantidade : 0, percentual);
                    });
                    chartData.addRows([row]);
                });

                const options = {
                    title: 'Gráfico por Faixa Etária e Gênero da Região ' + regiao.charAt(0).toUpperCase() + regiao.slice(1),
                    bars: 'group',
                    hAxis: { title: 'Faixa Etária' },
                    vAxis: { title: 'Número de Registros' }
                };

                const chart = new google.visualization.ColumnChart(document.getElementById(`chart-${regiao}`));
                chart.draw(chartData, options);

                // Atualizar a legenda
                const legenda = document.getElementById(`legenda-${regiao}`);
                legenda.innerHTML = '<strong>Legenda:</strong> ' + generos.map(genero => {
                    const totalGenero = dadosFormatados.filter(item => item.genero === genero).reduce((total, item) => total + item.quantidade, 0);
                    const percentualGenero = (totalGenero * 100 / totalEstudantes).toFixed(2) + '%';
                    return `<strong>${genero}</strong>: ${totalGenero} (${percentualGenero})`;
                }).join(', ');
            });
        }).fail(function (jqXHR, textStatus, msg) {
            alert('Erro na requisição: ' + msg);
        });
    }

    function getGraficoEnsinoMedioPorFaixaDeAnoEEtnia(regiao) {
        $.ajax({
            url: 'http://localhost:3004/relatorio-fies/get-ensino-medio-faixa-ano-etnia/' + regiao,
            type: 'get',
            dataType: 'json',
        }).done(function (data) {
            // Verificar se os dados estão presentes e não estão vazios
            if (!data || data.length === 0) {
                console.error('Dados ausentes ou vazios.');
                return;
            }
            console.log(data, 'data')
            const contagemPorFaixaAnoEEtnia = {};

            // Definir as faixas de ano desejadas
            let faixasAno = [
                { min: 1970, max: 2000, label: '1970-2000' },
                { min: 2001, max: 2005, label: '2001-2005' },
                { min: 2006, max: 2010, label: '2006-2010' },
                { min: 2011, max: 2015, label: '2011-2015' },
                { min: 2016, max: 2020, label: '2016-2020' }
            ];

            // Definir as etnias desejadas
            const etnias = ['BRANCA', 'PRETA', 'INDÍGENA', 'PARDA', 'AMARELA'];

            // Inicializar contagem para cada faixa de ano e etnia
            faixasAno.forEach(faixa => {
                contagemPorFaixaAnoEEtnia[faixa.label] = {};
                etnias.forEach(etnia => {
                    contagemPorFaixaAnoEEtnia[faixa.label][etnia] = { totalEstudantes: 0 };
                });
            });

            // Loop através do conjunto de dados para contar cada faixa de ano e etnia
            data.forEach(item => {
                const anoConclusao = item.ano_conclusao_ensino_medio;
                const etnia = item.etnia_cor;

                // Encontrar a faixa de ano correspondente
                const faixa = faixasAno.find(faixa => anoConclusao >= faixa.min && anoConclusao <= faixa.max);

                // Incrementar a contagem para a faixa de ano e etnia encontradas
                if (faixa && etnia && contagemPorFaixaAnoEEtnia[faixa.label] && contagemPorFaixaAnoEEtnia[faixa.label][etnia]) {
                    contagemPorFaixaAnoEEtnia[faixa.label][etnia].totalEstudantes++;
                }
            });
            
            // Calcular a quantidade total de estudantes
            const totalEstudantes = data.length;

            // Criar o gráfico de barras com base nas faixas de ano e etnias
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(function () {
                const chartData = new google.visualization.DataTable();
                chartData.addColumn('string', 'Faixa de Ano do Ensino Médio');

                // Adicionar colunas para cada etnia
                etnias.forEach(etnia => {
                    chartData.addColumn('number', etnia);
                    chartData.addColumn({ type: 'string', role: 'annotation' });
                });

                // Adicionar dados ao DataTable
                faixasAno.forEach(faixa => {
                    const row = [faixa.label];
                    etnias.forEach(etnia => {
                        const totalEstudantesEtnia = contagemPorFaixaAnoEEtnia[faixa.label][etnia].totalEstudantes;
                        const percentual = (totalEstudantesEtnia * 100 / totalEstudantes).toFixed(2) + '%';
                        row.push(totalEstudantesEtnia, percentual);
                    });
                    chartData.addRows([row]);
                });

                const options = {
                    title: 'Gráfico por Faixa de Ano e Etnia da Região ' + regiao.charAt(0).toUpperCase() + regiao.slice(1),
                    bars: 'group',
                    hAxis: { title: 'Faixa de Ano do Ensino Médio' },
                    vAxis: { title: 'Número de Registros' }
                };

                const chart = new google.visualization.ColumnChart(document.getElementById(`chart-${regiao}`));
                chart.draw(chartData, options);

                // Atualizar a legenda
                const legenda = document.getElementById(`legenda-${regiao}`);
                const totalEstudantesPorFaixa = {};

                // Calcular o total de estudantes por faixa de ano
                faixasAno.forEach(faixa => {
                    totalEstudantesPorFaixa[faixa.label] = 0;
                    etnias.forEach(etnia => {
                        totalEstudantesPorFaixa[faixa.label] += contagemPorFaixaAnoEEtnia[faixa.label][etnia].totalEstudantes;
                    });
                });

                // Montar a legenda com o total de estudantes por faixa de ano
                legenda.innerHTML = '<strong>Legenda:</strong> ' + faixasAno.map(faixa => {
                    const percentualFaixa = (totalEstudantesPorFaixa[faixa.label] * 100 / totalEstudantes).toFixed(2) + '%';
                    return `<strong>${faixa.label}</strong>: ${totalEstudantesPorFaixa[faixa.label]} (${percentualFaixa})`;
                }).join(', ');
            });

        }).fail(function (jqXHR, textStatus, msg) {
            alert('Erro na requisição: ' + msg);
        });
    }

    function getGraficoCandidatosPcdEtnia(etnia, regiao){
        $.ajax({
            url: 'http://localhost:3004/relatorio-fies/get-pcd-etnia/' + etnia,
            type: 'get',
            dataType: 'json',
        }).done(function (data) {
            console.log(data, 'data')
            // Converter o formato do data para algo mais fácil de usar
            const dadosFormatados = data.map(item => ({
                regiao: item.regiao_grupo_preferencia,
                quantidade: item._count ? item._count.regiao_grupo_preferencia : 0
            }));

            // Calcular a quantidade total de candidatos
            const totalCandidatos = dadosFormatados.reduce((total, item) => total + item.quantidade, 0);

            // Criar o gráfico de barras com base nas regiões
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(function () {
                const chartData = new google.visualization.DataTable();
                chartData.addColumn('string', 'Região');
                chartData.addColumn('number', 'Quantidade');
                chartData.addColumn({ type: 'string', role: 'annotation' }); // Adicionar coluna para os percentuais
                chartData.addRows(dadosFormatados.map(item => {
                    const percentual = (item.quantidade / totalCandidatos * 100).toFixed(2) + '%';
                    return [item.regiao, item.quantidade, percentual];
                }));

                // Configurar as opções do gráfico
                const options = {
                    title: `Quantidade de Candidatos com Etnia ${etnia.charAt(0).toUpperCase()}${etnia.slice(1)} que são PCD por Região`,
                    bars: 'vertical', // Tipo de gráfico de barras
                    bar: { groupWidth: '50%' }, // Espaçamento entre barras
                };

                // Criar o gráfico de barras
                const chart = new google.visualization.ColumnChart(document.getElementById(`chart-${regiao}`));
                chart.draw(chartData, options);

                // Atualizar a legenda
                const legenda = document.getElementById(`legenda-${regiao}`);
                legenda.innerHTML = '<strong>Legenda:</strong> ' + dadosFormatados.map(item => {
                    const percentual = (item.quantidade / totalCandidatos * 100).toFixed(2) + '%';
                    return `<strong>${item.regiao}</strong>: <span class="legenda-quantidade">${item.quantidade} (${percentual})</span>`;
                }).join(', ');
            });
        });  
    }

    function getGraficoCandidatosPcdGenero(regiao){
        $.ajax({
            url: 'http://localhost:3004/relatorio-fies/get-pcd-genero/' + regiao,
            type: 'get',
            dataType: 'json',
        }).done(function (data) {
            const contagemPorFaixaEtariaGenero = {};
            console.log(data, 'data')
            // Definir as faixas etárias desejadas
            let faixasEtarias = [
                { min: 19, max: 24, label: '19-24' },
                { min: 25, max: 29, label: '25-29' },
                { min: 30, max: 34, label: '30-34' },
                { min: 35, max: 39, label: '35-39' },
                { min: 40, max: 44, label: '40-44' },
                { min: 45, max: 49, label: '45-49' },
                { min: 50, max: 69, label: '50-69' }
            ];

            faixasEtarias = faixasEtarias.map(item => {
                const quantEstudantes = data.filter(estudante => (estudante.idade >= item.min && estudante.idade <= item.max)).length;

                return {
                    min: item.min,
                    max: item.max,
                    label: item.label,
                    quantidade: quantEstudantes
                };
            });

            // Definir os gêneros
            const generos = ['M', 'F']; // Assume 'M' para Masculino e 'F' para Feminino

            // Inicializar contagem para cada faixa etária e gênero
            faixasEtarias.forEach(faixa => {
                contagemPorFaixaEtariaGenero[faixa.label] = {};
                generos.forEach(genero => {
                    contagemPorFaixaEtariaGenero[faixa.label][genero] = 0;
                });
            });

            // Loop através do conjunto de dados para contar cada faixa etária e gênero
            data.forEach(item => {
                const idade = item.idade;
                const genero = item.sexo; // Alterado de 'genero' para 'sexo' conforme o exemplo de retorno da API

                // Encontrar a faixa etária correspondente
                const faixa = faixasEtarias.find(faixa => idade >= faixa.min && idade <= faixa.max);

                // Incrementar a contagem para a faixa etária e gênero encontrados
                if (faixa && genero) {
                    contagemPorFaixaEtariaGenero[faixa.label][genero]++;
                }
            });

            // Converter o objeto em um array para usar no gráfico de barras
            const dadosFormatados = [];
            faixasEtarias.forEach(faixa => {
                generos.forEach(genero => {
                    dadosFormatados.push({
                        faixa: faixa.label,
                        genero: genero,
                        quantidade: contagemPorFaixaEtariaGenero[faixa.label][genero]
                    });
                });
            });

            // Calcular a quantidade total de estudantes
            const totalEstudantes = data.length;

            // Criar o gráfico de barras com base nas faixas etárias e gêneros
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(function () {
                const chartData = new google.visualization.DataTable();
                chartData.addColumn('string', 'Faixa Etária');

                // Adicionar colunas para cada gênero
                generos.forEach(genero => {
                    chartData.addColumn('number', genero);
                    chartData.addColumn({ type: 'string', role: 'annotation' });
                });

                // Adicionar dados ao DataTable
                faixasEtarias.forEach(faixa => {
                    const dadosFaixa = dadosFormatados.filter(item => item.faixa === faixa.label);
                    const row = [faixa.label];
                    generos.forEach(genero => {
                        const dadoGenero = dadosFaixa.find(item => item.genero === genero);
                        const percentual = ((dadoGenero ? dadoGenero.quantidade : 0) * 100 / totalEstudantes).toFixed(2) + '%';
                        row.push(dadoGenero ? dadoGenero.quantidade : 0, percentual);
                    });
                    chartData.addRows([row]);
                });

                const options = {
                    title: 'Gráfico de Candidatos com PCD por Faixa Etária e Gênero da Região ' + regiao.charAt(0).toUpperCase() + regiao.slice(1),
                    bars: 'group',
                    hAxis: { title: 'Faixa Etária' },
                    vAxis: { title: 'Número de Registros' }
                };

                const chart = new google.visualization.ColumnChart(document.getElementById(`chart-${regiao}`));
                chart.draw(chartData, options);

                // Atualizar a legenda
                const legenda = document.getElementById(`legenda-${regiao}`);
                legenda.innerHTML = '<strong>Legenda:</strong> ' + generos.map(genero => {
                    const totalGenero = dadosFormatados.filter(item => item.genero === genero).reduce((total, item) => total + item.quantidade, 0);
                    const percentualGenero = (totalGenero * 100 / totalEstudantes).toFixed(2) + '%';
                    return `<strong>${genero}</strong>: ${totalGenero} (${percentualGenero})`;
                }).join(', ');
            });
        });
    }

    function getGraficoEtniaArea(regiao) {
        $.ajax({
            url: 'http://localhost:3004/relatorio-fies/get-pcd-area/' + regiao,
            type: 'get',
            dataType: 'json',
        }).done(function (data) {
            const contagemPorEtniaArea = {};

            // Inicializar contagem para cada etnia e área
            data.forEach(item => {
                const etnia = item.etnia_cor;
                const area = item.area_conhecimento;

                if (!contagemPorEtniaArea[etnia]) {
                    contagemPorEtniaArea[etnia] = {};
                }

                if (!contagemPorEtniaArea[etnia][area]) {
                    contagemPorEtniaArea[etnia][area] = 0;
                }

                contagemPorEtniaArea[etnia][area]++;
            });

            // Converter o objeto em um array para usar no gráfico de barras
            const dadosFormatados = [];
            Object.keys(contagemPorEtniaArea).forEach(etnia => {
                Object.keys(contagemPorEtniaArea[etnia]).forEach(area => {
                    dadosFormatados.push({
                        etnia: etnia,
                        area: area,
                        quantidade: contagemPorEtniaArea[etnia][area]
                    });
                });
            });

            // Calcular a quantidade total de registros
            const totalRegistros = data.length;

            // Criar o gráfico de barras empilhadas com base em etnia e área
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(function () {
                const chartData = new google.visualization.DataTable();
                chartData.addColumn('string', 'Etnia');

                // Adicionar colunas para cada área
                const areas = [...new Set(dadosFormatados.map(item => item.area))];
                areas.forEach((area, index) => {
                    chartData.addColumn('number', area);
                    if (index === 0) {
                        chartData.addColumn({ type: 'string', role: 'annotation' });
                    }
                });

                // Adicionar dados ao DataTable
                const linhas = [];
                Object.keys(contagemPorEtniaArea).forEach(etnia => {
                    const dadosEtnia = dadosFormatados.filter(item => item.etnia === etnia);
                    const linha = [etnia];

                    areas.forEach((area, index) => {
                        const dadoArea = dadosEtnia.find(item => item.area === area);
                        linha.push(dadoArea ? dadoArea.quantidade : 0);
                        if (index === 0) {
                            const percentual = ((dadosEtnia.reduce((total, item) => total + item.quantidade, 0) * 100) / totalRegistros).toFixed(2) + '%';
                            linha.push(percentual);
                        }
                    });

                    linhas.push(linha);
                });

                chartData.addRows(linhas);

                const options = {
                    title: 'Gráfico por Etnia e Área da Região ' + regiao.charAt(0).toUpperCase() + regiao.slice(1),
                    isStacked: true,
                    hAxis: { title: 'Etnia' },
                    vAxis: { title: 'Número de Registros' }
                };

                const chart = new google.visualization.ColumnChart(document.getElementById(`chart-${regiao}`));
                chart.draw(chartData, options);

                // Atualizar a legenda
                const legenda = document.getElementById(`legenda-${regiao}`);
                legenda.innerHTML = '<strong>Legenda:</strong> ' + Object.keys(contagemPorEtniaArea).map(etnia => {
                    const totalEtnia = dadosFormatados.filter(item => item.etnia === etnia).reduce((total, item) => total + item.quantidade, 0);
                    return `<strong>${etnia}</strong>: ${totalEtnia}`;
                }).join(', ');
            });
        });
    }

    function getGraficoGeneroArea(regiao) {
        $.ajax({
            url: 'http://localhost:3004/relatorio-fies/get-genero-area/' + regiao,
            type: 'get',
            dataType: 'json',
        }).done(function (data) {
            const contagemPorGeneroArea = {};

            // Inicializar contagem para cada gênero e área
            data.forEach(item => {
                const genero = item.sexo; // Supondo que o campo seja 'sexo'
                const area = item.area_conhecimento;

                if (!contagemPorGeneroArea[genero]) {
                    contagemPorGeneroArea[genero] = {};
                }

                if (!contagemPorGeneroArea[genero][area]) {
                    contagemPorGeneroArea[genero][area] = 0;
                }

                contagemPorGeneroArea[genero][area]++;
            });

            // Converter o objeto em um array para usar no gráfico de barras
            const dadosFormatados = [];
            Object.keys(contagemPorGeneroArea).forEach(genero => {
                Object.keys(contagemPorGeneroArea[genero]).forEach(area => {
                    dadosFormatados.push({
                        genero: genero,
                        area: area,
                        quantidade: contagemPorGeneroArea[genero][area]
                    });
                });
            });

            // Calcular a quantidade total de registros
            const totalRegistros = data.length;

            // Criar o gráfico de barras empilhadas com base em gênero e área
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(function () {
                const chartData = new google.visualization.DataTable();
                chartData.addColumn('string', 'Gênero');

                // Adicionar colunas para cada área
                const areas = [...new Set(dadosFormatados.map(item => item.area))];
                areas.forEach((area, index) => {
                    chartData.addColumn('number', area);
                    if (index === 0) {
                        chartData.addColumn({ type: 'string', role: 'annotation' });
                    }
                });

                // Adicionar dados ao DataTable
                const linhas = [];
                Object.keys(contagemPorGeneroArea).forEach(genero => {
                    const dadosGenero = dadosFormatados.filter(item => item.genero === genero);
                    const linha = [genero];

                    areas.forEach((area, index) => {
                        const dadoArea = dadosGenero.find(item => item.area === area);
                        linha.push(dadoArea ? dadoArea.quantidade : 0);
                        if (index === 0) {
                            const percentual = ((dadosGenero.reduce((total, item) => total + item.quantidade, 0) * 100) / totalRegistros).toFixed(2) + '%';
                            linha.push(percentual);
                        }
                    });

                    linhas.push(linha);
                });

                chartData.addRows(linhas);

                const options = {
                    title: 'Gráfico por Gênero e Área da Região ' + regiao.charAt(0).toUpperCase() + regiao.slice(1),
                    isStacked: true,
                    hAxis: { title: 'Gênero' },
                    vAxis: { title: 'Número de Registros' }
                };

                const chart = new google.visualization.ColumnChart(document.getElementById(`chart-${regiao}`));
                chart.draw(chartData, options);

                // Atualizar a legenda
                const legenda = document.getElementById(`legenda-${regiao}`);
                legenda.innerHTML = '<strong>Legenda:</strong> ' + Object.keys(contagemPorGeneroArea).map(genero => {
                    const totalGenero = dadosFormatados.filter(item => item.genero === genero).reduce((total, item) => total + item.quantidade, 0);
                    return `<strong>${genero}</strong>: ${totalGenero}`;
                }).join(', ');
            });
        });
    }

    function getGraficoSituacaoInscricaoPcd(regiao) {
        $.ajax({
            url: 'http://localhost:3004/relatorio-fies/get-pcd-situacao-incricao/' + regiao,
            type: 'get',
            dataType: 'json',
        }).done(function (data) {
            const contagemPorSituacao = {};

            // Inicializar contagem para cada situação de inscrição
            data.forEach(item => {
                const situacao = item.situacao_inscricao_fies;

                if (!contagemPorSituacao[situacao]) {
                    contagemPorSituacao[situacao] = 0;
                }

                contagemPorSituacao[situacao]++;
            });

            // Converter o objeto em um array para usar no gráfico de barras
            const dadosFormatados = Object.keys(contagemPorSituacao).map(situacao => ({
                situacao: situacao,
                quantidade: contagemPorSituacao[situacao]
            }));

            // Calcular a quantidade total de registros
            const totalRegistros = data.length;

            // Criar o gráfico de barras empilhadas com base na situação de inscrição
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(function () {
                const chartData = new google.visualization.DataTable();
                chartData.addColumn('string', 'Situação de Inscrição');
                chartData.addColumn('number', 'Quantidade');
                chartData.addColumn({ type: 'string', role: 'annotation' });
                chartData.addColumn({ type: 'string', role: 'tooltip' });

                // Adicionar dados ao DataTable
                const linhas = [];
                dadosFormatados.forEach(item => {
                    const percentual = ((item.quantidade * 100) / totalRegistros).toFixed(2) + '%';
                    const linha = [item.situacao, item.quantidade, percentual, null];
                    linhas.push(linha);
                });

                chartData.addRows(linhas);

                const options = {
                    title: 'Gráfico por Situação de Inscrição FIES na Região ' + regiao.charAt(0).toUpperCase() + regiao.slice(1),
                    isStacked: true,
                    hAxis: { title: 'Situação de Inscrição' },
                    vAxis: { title: 'Número de Registros' }
                };

                const chart = new google.visualization.ColumnChart(document.getElementById(`chart-${regiao}`));
                chart.draw(chartData, options);

                // Atualizar a legenda
                const legenda = document.getElementById(`legenda-${regiao}`);
                legenda.innerHTML = '<strong>Legenda:</strong> ' + dadosFormatados.map(item => {
                    return `<strong>${item.situacao}</strong>: ${item.quantidade}`;
                }).join(', ');
            });
        });
    }

    function getGraficoSituacaoInscricaoGenero(regiao) {
        $.ajax({
            url: 'http://localhost:3004/relatorio-fies/get-genero-situacao-incricao/' + regiao,
            type: 'get',
            dataType: 'json',
        }).done(function (data) {
            const contagemPorSituacaoGenero = {};

            // Inicializar contagem para cada situação de inscrição e gênero
            data.forEach(item => {
                const situacao = item.situacao_inscricao_fies;
                const genero = item.sexo;

                if (!contagemPorSituacaoGenero[situacao]) {
                    contagemPorSituacaoGenero[situacao] = {};
                }

                if (!contagemPorSituacaoGenero[situacao][genero]) {
                    contagemPorSituacaoGenero[situacao][genero] = 0;
                }

                contagemPorSituacaoGenero[situacao][genero]++;
            });

            // Converter o objeto em um array para usar no gráfico de barras
            const dadosFormatados = [];
            Object.keys(contagemPorSituacaoGenero).forEach(situacao => {
                Object.keys(contagemPorSituacaoGenero[situacao]).forEach(genero => {
                    dadosFormatados.push({
                        situacao: situacao,
                        genero: genero,
                        quantidade: contagemPorSituacaoGenero[situacao][genero]
                    });
                });
            });

            // Calcular a quantidade total de registros
            const totalRegistros = data.length;

            // Criar o gráfico de barras agrupadas com base na situação de inscrição e gênero
            google.charts.load('current', { 'packages': ['corechart'] });
            google.charts.setOnLoadCallback(function () {
                const chartData = new google.visualization.DataTable();
                chartData.addColumn('string', 'Situação de Inscrição');

                // Adicionar colunas para cada gênero
                const generos = [...new Set(dadosFormatados.map(item => item.genero))];
                generos.forEach(genero => {
                    chartData.addColumn('number', genero);
                    chartData.addColumn({ type: 'string', role: 'annotation' });
                });

                // Adicionar dados ao DataTable
                const linhas = [];
                Object.keys(contagemPorSituacaoGenero).forEach(situacao => {
                    const dadosSituacao = dadosFormatados.filter(item => item.situacao === situacao);
                    const linha = [situacao];

                    generos.forEach(genero => {
                        const dadoGenero = dadosSituacao.find(item => item.genero === genero);
                        const percentual = ((dadoGenero ? dadoGenero.quantidade : 0) * 100 / totalRegistros).toFixed(2) + '%';
                        linha.push(dadoGenero ? dadoGenero.quantidade : 0, percentual);
                    });

                    linhas.push(linha);
                });

                chartData.addRows(linhas);

                const options = {
                    title: 'Gráfico por Situação de Inscrição FIES Separado por Gênero na Região ' + regiao.charAt(0).toUpperCase() + regiao.slice(1),
                    bars: 'group',
                    hAxis: { title: 'Situação de Inscrição' },
                    vAxis: { title: 'Número de Registros' }
                };

                const chart = new google.visualization.ColumnChart(document.getElementById(`chart-${regiao}`));
                chart.draw(chartData, options);

                // Atualizar a legenda
                const legenda = document.getElementById(`legenda-${regiao}`);
                legenda.innerHTML = '<strong>Legenda:</strong> ' + generos.map(genero => {
                    const totalGenero = dadosFormatados.filter(item => item.genero === genero).reduce((total, item) => total + item.quantidade, 0);
                    const percentualGenero = (totalGenero * 100 / totalRegistros).toFixed(2) + '%';
                    return `<strong>${genero}</strong>: ${totalGenero} (${percentualGenero})`;
                }).join(', ');
            });
        });

    }

    function getGraficoSituacaoInscricaoEtnia(regiao) {
    $.ajax({
        url: 'http://localhost:3004/relatorio-fies/get-etnia-situacao-incricao/' + regiao,
        type: 'get',
        dataType: 'json',
    }).done(function (data) {
        const contagemPorSituacaoEtnia = {};

        // Inicializar contagem para cada situação de inscrição e etnia
        data.forEach(item => {
            const situacao = item.situacao_inscricao_fies;
            const etnia = item.etnia_cor;

            if (!contagemPorSituacaoEtnia[situacao]) {
                contagemPorSituacaoEtnia[situacao] = {};
            }

            if (!contagemPorSituacaoEtnia[situacao][etnia]) {
                contagemPorSituacaoEtnia[situacao][etnia] = 0;
            }

            contagemPorSituacaoEtnia[situacao][etnia]++;
        });

        // Converter o objeto em um array para usar no gráfico de barras
        const dadosFormatados = [];
        Object.keys(contagemPorSituacaoEtnia).forEach(situacao => {
            Object.keys(contagemPorSituacaoEtnia[situacao]).forEach(etnia => {
                dadosFormatados.push({
                    situacao: situacao,
                    etnia: etnia,
                    quantidade: contagemPorSituacaoEtnia[situacao][etnia]
                });
            });
        });

        // Calcular a quantidade total de registros
        const totalRegistros = data.length;

        // Criar o gráfico de barras agrupadas com base na situação de inscrição e etnia
        google.charts.load('current', { 'packages': ['corechart'] });
        google.charts.setOnLoadCallback(function () {
            const chartData = new google.visualization.DataTable();
            chartData.addColumn('string', 'Situação de Inscrição');

            // Adicionar colunas para cada etnia
            const etnias = [...new Set(dadosFormatados.map(item => item.etnia))];
            etnias.forEach(etnia => {
                chartData.addColumn('number', etnia);
                chartData.addColumn({ type: 'string', role: 'annotation' });
            });

            // Verificar o número correto de colunas no DataTable
            const numColunasDataTable = etnias.length * 2 + 1;
            
            // Verificar se o número de colunas está correto
            if (chartData.getNumberOfColumns() !== numColunasDataTable) {
                console.error('Erro: Número incorreto de colunas no DataTable.');
                return;
            }

            // Adicionar dados ao DataTable
            const linhas = [];
            Object.keys(contagemPorSituacaoEtnia).forEach(situacao => {
                const dadosSituacao = dadosFormatados.filter(item => item.situacao === situacao);
                const linha = [situacao];

                etnias.forEach(etnia => {
                    const dadoEtnia = dadosSituacao.find(item => item.etnia === etnia);
                    const percentual = ((dadoEtnia ? dadoEtnia.quantidade : 0) * 100 / totalRegistros).toFixed(2) + '%';
                    linha.push(dadoEtnia ? dadoEtnia.quantidade : 0, percentual);
                });

                linhas.push(linha);
            });

            chartData.addRows(linhas);

            const options = {
                title: 'Gráfico por Situação de Inscrição FIES Separado por Etnia na Região ' + regiao.charAt(0).toUpperCase() + regiao.slice(1),
                isStacked: true,
                hAxis: { title: 'Situação de Inscrição' },
                vAxis: { title: 'Número de Registros' }
            };

            const chart = new google.visualization.ColumnChart(document.getElementById(`chart-${regiao}`));
            chart.draw(chartData, options);

            // Atualizar a legenda
            const legenda = document.getElementById(`legenda-${regiao}`);
            legenda.innerHTML = '<strong>Legenda:</strong> ' + etnias.map(etnia => {
                const totalEtnia = dadosFormatados.filter(item => item.etnia === etnia).reduce((total, item) => total + item.quantidade, 0);
                const percentualEtnia = (totalEtnia * 100 / totalRegistros).toFixed(2) + '%';
                return `<strong>${etnia}</strong>: ${totalEtnia} (${percentualEtnia})`;
            }).join(', ');
        });
    });
}







</script>
